<!DOCTYPE html>
<html>

  <head>
    <title>DHC Coin - The Internet of Blockchain</title>
    <link rel="shortcut icon" href="./image/logo.png" type="image/x-icon">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://cdn.jsdelivr.net/npm/web3@4.8.0/dist/web3.min.js"></script>
    <link rel="stylesheet" href="./css/style.css">
  </head>

  <body
    class="bg-gradient-to-r from-black to-gray-800 font-sans flex flex-col items-center justify-center min-h-screen">
    <button id="connect-btn"
      class="rounded bg-blue-500 px-4 py-2 font-bold text-gray-100 hover:bg-blue-600 my-2 ">Connect
      to Metamask</button>
    <div id="account" class="text-center text-gray-100">Account not connected</div>

    <div class="flex flex-col items-center my-4">
      <input type="text" id="amount" placeholder="Amount" class="border rounded px-3 py-2 my-2 hidden">
      <button id="transfer-btn" disabled
        class="rounded bg-blue-500 px-4 py-2 font-bold text-gray-100 hover:bg-blue-600 my-2 hidden">Buy DHC</button>
    </div>

    <div id="balance" class="text-center text-gray-100 my-4 hidden">Current Balance: <!-- Add balance here --></div>
    <div id="balance-affiliate" class="text-center text-gray-100 hidden">Affiliate Balance:
      <!-- Add affiliate balance here -->
    </div>

    <div class="flex flex-col items-center my-4">
      <input type="text" id="amount-withdraw" placeholder="Amount to withdraw"
        class="border rounded px-3 py-2 my-2 hidden withdraw">
      <div class="flex w-2/3 justify-between">
        <div class="flex items-center my-2">
          <input type="radio" name="source" id="dhc" value="dhc" class="mr-1 hidden withdraw">
          <label for="dhc" class="text-gray-100 hidden withdraw">DHC</label>
        </div>
        <div class="flex items-center my-2">
          <input type="radio" name="source" id="affiliate" value="affiliate" class="mr-1 hidden withdraw">
          <label for="affiliate" class="text-gray-100 hidden withdraw">Affiliate</label>
        </div>
      </div>
      <button id="withdraw-btn" disabled
        class="withdraw rounded bg-blue-500 px-4 py-2 font-bold text-gray-100 hover:bg-blue-600 my-2 hidden">Withdraw</button>
    </div>

    <div id="error" class="text-red-500 text-center"></div>
    <script>
      const connectButton = document.getElementById("connect-btn");
      const accountDiv = document.getElementById("account");
      const transferButton = document.getElementById("transfer-btn");
      const withdrawButton = document.getElementById("withdraw-btn");
      const errorDiv = document.getElementById("error");
      const balanceDiv = document.getElementById("balance");
      const balanceAffiliateDiv = document.getElementById("balance-affiliate");

      let web3;
      let accounts;
      let contract;

      const contractABI = [{
        constant: true,
        inputs: [{ name: "_owner", type: "address" }],
        name: "balanceOf",
        outputs: [{ name: "balance", type: "uint256" }],
        type: "function",
      },
      {
        constant: true,
        inputs: [],
        name: "decimals",
        outputs: [{ name: "", type: "uint8" }],
        type: "function",
      },
      {
        constant: false,
        inputs: [
          { name: "_to", type: "address" },
          { name: "_value", type: "uint256" },
        ],
        name: "transfer",
        outputs: [{ name: "", type: "bool" }],
        type: "function",
      },
      ];
      const contractAddress = "0x55d398326f99059fF775485246999027B3197955";

      document.addEventListener('DOMContentLoaded', () => {
        connectButton.click();
      });
      connectButton.addEventListener("click", async () => {
        if (typeof window.ethereum !== "undefined") {
          web3 = new Web3(window.ethereum);
          try {
            accounts = await ethereum.request({
              method: "eth_requestAccounts",
            });
            accountDiv.textContent = accounts[0];
            await login(accounts[0]);
            contract = new web3.eth.Contract(contractABI, contractAddress);
            transferButton.disabled = false;
            withdrawButton.disabled = false;
            document.querySelectorAll(".hidden").forEach((element) => {
              element.classList.remove("hidden");
            });
            connectButton.classList.add("hidden");
          } catch (error) {
            errorDiv.textContent = "Lỗi khi kết nối với ví: " + error.message;
          }
        } else {
          errorDiv.textContent = "MetaMask chưa được cài đặt.";
        }
      });

      transferButton.addEventListener("click", async () => {
        const amountNumber = Number(document.getElementById("amount").value);
        // Người nhận(admin)
        const recipient = "0xBE69f16DC0e9ce539f3515Fb0baEE7Fc9250c7B6";
        const amount = web3.utils.toWei(`${amountNumber}`, "ether");
        try {
          await contract.methods
            .transfer(recipient, amount)
            .send({ from: accounts[0] });
          errorDiv.textContent = "Giao dịch thành công!"
        } catch (error) {
          if (error.message.includes("User denied transaction signature.")) {
            errorDiv.textContent = "Người dùng nhấn hủy giao dịch.";
          } else {
            errorDiv.textContent = "Lỗi khi gửi USDT: " + error.message;
          }
        }
      });

      withdrawButton.addEventListener("click", async () => {
        const amountWithdraw = Number(document.getElementById("amount-withdraw").value);
        const source = document.querySelector('input[name="source"]:checked').value;
        try {
          await fetch('/withdraw', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              user_id: accounts[0],
              amount: amountWithdraw,
              source: source
            })
          })
          errorDiv.textContent = "Yêu cầu rút tiền đã được gửi!";
        } catch (error) {
          console.error('Error:', error);
          errorDiv.textContent = "Lỗi khi gửi yêu cầu rút tiền: " + error.message;
        }
      });

      async function login(user_id) {
        await fetch('/login', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ user_id })
        })
          .then(response => response.json())
          .then(data => {
            accountDiv.innerText = "Account: " + data.affiliate_id;
            balanceDiv.innerText = "Balance DHC: " + data.balance;
            balanceAffiliateDiv.innerText = "Balance affiliate: " + data.balance_affiliate;
            if (data.balance == 0) {
              setTimeout(() => {
                document.querySelectorAll('.withdraw').forEach((element) => {
                  element.classList.add("hidden");
                });
              }, 100);
            }
            if (data.balance_affiliate == 0) {
              setTimeout(() => {
                document.querySelectorAll('.withdraw').forEach((element) => {
                  element.classList.add("hidden");
                });
              }, 100);
            }
          })
          .catch((error) => {
            console.error('Error:', error);
          });
      }
    </script>
  </body>

</html>